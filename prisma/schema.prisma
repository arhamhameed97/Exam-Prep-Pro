// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  level         String    @default("student")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  subjects Subject[]
  tests    Test[]
  attempts TestAttempt[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subject {
  id          String   @id @default(cuid())
  name        String
  description String?
  level       String   @default("O-Level")
  code        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tests Test[]

  @@unique([code, userId])
  @@map("subjects")
}

model Test {
  id            String   @id @default(cuid())
  title         String
  description   String?
  type          String   @default("practice") // practice, mock, past-paper
  difficulty    String   @default("medium")   // easy, medium, hard
  duration      Int      @default(60)         // minutes
  totalMarks    Int      @default(100)
  isActive      Boolean  @default(true)
  isAIGenerated Boolean  @default(false)      // true for AI-generated tests
  topics        String?                       // JSON string of selected topics
  questionTypes String?                       // JSON string of selected question types
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  subjectId String
  subject   Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  questions Question[]
  attempts  TestAttempt[]

  @@map("tests")
}

model TestAttempt {
  id           String   @id @default(cuid())
  score        Float
  grade        String
  timeSpent    Int      // minutes
  completedAt  DateTime @default(now())
  status       String   @default("completed") // completed, in-progress, abandoned

  testId String
  test   Test   @relation(fields: [testId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("test_attempts")
}

model Question {
  id            String   @id @default(cuid())
  questionText  String
  options       String   // JSON string of answer options
  correctAnswer String   // The correct answer (A, B, C, D, etc.)
  explanation   String?  // Explanation for the correct answer
  marks         Int      @default(1)
  difficulty    String   @default("medium") // easy, medium, hard
  topic         String?  // Topic or chapter this question belongs to
  questionType  String   @default("mcq")    // mcq, short-answer, long-answer, essay, true-false, fill-blanks
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  testId String
  test   Test   @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model PastPaper {
  id          String   @id @default(cuid())
  title       String
  year        Int
  month       String   // May, Oct, etc.
  paperType   String   // Paper 1, Paper 2, etc.
  subjectCode String
  url         String?
  content     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("past_papers")
}