generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  image         String?
  password      String?
  level         String        @default("student")
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  sessions      Session[]
  subjects      Subject[]
  attempts      TestAttempt[]
  tests         Test[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subject {
  id             String   @id @default(cuid())
  name           String
  description    String?
  level          String   @default("O-Level")
  code           String
  examBoard      String?  // e.g., "Cambridge", "Edexcel", "AQA", etc.
  syllabus       String?
  markScheme     String?
  syllabusFile   String?
  markSchemeFile String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tests          Test[]

  @@unique([code, userId])
  @@map("subjects")
}

model Test {
  id            String        @id @default(cuid())
  title         String
  description   String?
  type          String        @default("practice")
  difficulty    String        @default("medium")
  duration      Int           @default(60)
  totalMarks    Int           @default(100)
  isActive      Boolean       @default(true)
  isAIGenerated Boolean       @default(false)
  topics        String?
  questionTypes String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  subjectId     String
  userId        String
  questions     Question[]
  attempts      TestAttempt[]
  subject       Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tests")
}

model TestAttempt {
  id          String   @id @default(cuid())
  score       Float
  grade       String
  timeSpent   Int
  completedAt DateTime @default(now())
  status      String   @default("completed")
  testId      String
  userId      String
  answers     String?
  test        Test     @relation(fields: [testId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("test_attempts")
}

model Question {
  id                 String   @id @default(cuid())
  questionText       String
  options            String
  correctAnswer      String
  explanation        String?
  marks              Int      @default(1)
  difficulty         String   @default("medium")
  topic              String?
  questionType       String   @default("mcq")
  isPastPaper        Boolean  @default(false)
  pastPaperYear      Int?
  pastPaperMonth     String?
  pastPaperVariant   String?
  source             String   @default("ai")
  specificMarkScheme String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  testId             String
  test               Test     @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model PastPaper {
  id          String   @id @default(cuid())
  title       String
  year        Int
  month       String
  paperType   String
  subjectCode String
  url         String?
  content     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("past_papers")
}
